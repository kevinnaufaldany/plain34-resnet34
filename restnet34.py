# -*- coding: utf-8 -*-
"""Salinan dari Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BCa_WyBlAFj4h2xR0sqDKGkanUr2AbIv
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from torchinfo import summary

class BasicBlock(nn.Module):
    """
    ResNet Basic Block with residual connection.
    """
    def __init__(self, in_channels, out_channels, stride=1, downsample=None):
        super(BasicBlock, self).__init__()

        # First convolutional layer
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3,
                               stride=stride, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(out_channels)

        # Second convolutional layer
        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3,
                               stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(out_channels)

        # Downsample layer (for dimension matching)
        self.downsample = downsample

    def forward(self, x):
        identity = x  # shortcut

        # conv1 -> bn1 -> relu
        out = self.conv1(x)
        out = self.bn1(out)
        out = F.relu(out)

        # conv2 -> bn2
        out = self.conv2(out)
        out = self.bn2(out)

        # Jika dimensi tidak sama, lakukan downsample
        if self.downsample is not None:
            identity = self.downsample(identity)

        # Residual connection
        out += identity
        out = F.relu(out)

        return out


class ResNet34(nn.Module):
    """
    ResNet-34 implementation.
    """
    def __init__(self, num_classes=5):
        super(ResNet34, self).__init__()

        # Initial convolutional layer
        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)

        # ResNet stages
        self.stage1 = self._make_stage(64, 64, 3, stride=1)    # 3 blocks
        self.stage2 = self._make_stage(64, 128, 4, stride=2)   # 4 blocks
        self.stage3 = self._make_stage(128, 256, 6, stride=2)  # 6 blocks
        self.stage4 = self._make_stage(256, 512, 3, stride=2)  # 3 blocks

        # Final layers
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512, num_classes)

        self._initialize_weights()

    def _make_stage(self, in_channels, out_channels, num_blocks, stride):
        downsample = None

        if stride != 1 or in_channels != out_channels:
            downsample = nn.Sequential(
                nn.Conv2d(in_channels, out_channels, kernel_size=1,
                          stride=stride, bias=False),
                nn.BatchNorm2d(out_channels),
            )

        layers = []
        layers.append(BasicBlock(in_channels, out_channels, stride, downsample))
        for _ in range(1, num_blocks):
            layers.append(BasicBlock(out_channels, out_channels))

        return nn.Sequential(*layers)

    def _initialize_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                nn.init.normal_(m.weight, 0, 0.01)
                nn.init.constant_(m.bias, 0)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = F.relu(x)
        x = self.maxpool(x)

        x = self.stage1(x)
        x = self.stage2(x)
        x = self.stage3(x)
        x = self.stage4(x)

        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.fc(x)

        return x


def create_resnet34(num_classes=5):
    return ResNet34(num_classes=num_classes)


def test_model():
    print("Creating ResNet-34 model...")
    model = create_resnet34(num_classes=5)

    print("\n" + "="*50)
    print("RESNET-34 MODEL ARCHITECTURE SUMMARY")
    print("="*50)

    try:
        summary(model, input_size=(1, 3, 224, 224), verbose=1)
    except Exception as e:
        print(f"Error in torchinfo summary: {e}")
        print("Trying manual forward pass...")

        model.eval()
        with torch.no_grad():
            test_input = torch.randn(1, 3, 224, 224)
            output = model(test_input)
            print(f"Input shape: {test_input.shape}")
            print(f"Output shape: {output.shape}")

    total_params = sum(p.numel() for p in model.parameters())
    trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)

    print(f"\nTotal parameters: {total_params:,}")
    print(f"Trainable parameters: {trainable_params:,}")

    return model


if __name__ == "__main__":
    model = test_model()
    print("\nMODEL READY FOR TRAINING!")